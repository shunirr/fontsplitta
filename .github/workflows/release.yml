name: release
permissions:
  contents: write
on:
  push:
    tags:
      - "*"
  workflow_dispatch:
jobs:
  release-binary:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-13", "macos-latest"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup vars
        id: setup-vars
        run: |
          grep "python" "mise.toml" | perl -pe 's/[ "]+//g' >> $GITHUB_OUTPUT
      - name: Set filename
        uses: actions/github-script@v7
        id: set-filename
        with:
          script: |
            const os = require("os");
            const platform = process.platform
            const arch = process.env.PROCESSOR_ARCHITEW6432 || process.arch;
            if (platform === "win32") {
              return `fontsplitta-${platform}-${arch}.zip`;
            } else {
              return `fontsplitta-${platform}-${arch}.tar.gz`;
            }
          result-encoding: string
      - name: Set type
        id: set-type
        run: |
          if  [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "result=zip" >> $GITHUB_OUTPUT
          else
            echo "result=tar" >> $GITHUB_OUTPUT
          fi
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.setup-vars.outputs.python }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Build executable
        run: |
          poetry run pyinstaller --onefile --clean --name "fontsplitta" "fontsplitta/__main__.py"
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.6
        with:
          directory: "dist"
          type: ${{ steps.set-type.outputs.result }}
          filename: ${{ steps.set-filename.outputs.result }}
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.set-filename.outputs.result }}
  release-python:
    runs-on: ubuntu-latest
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup vars
        id: setup-vars
        run: grep "python" "mise.toml" | perl -pe 's/[ "]+//g' >> $GITHUB_OUTPUT
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.setup-vars.outputs.python }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Publish package
        run: |
          poetry publish --build
